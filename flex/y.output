Terminals unused in grammar

   INTEGER
   DOUBLE
   STRING
   EQ
   NE
   LT
   LE
   GT
   GE
   LPAREN
   RPAREN
   LBRACE
   RBRACE
   COMMA
   DOT
   PLUS
   MINUS
   MUL
   DIV
   IF
   ELSE
   WHILE
   FOR
   RETURN
   FUNC
   TMINUS
   TPLUS
   TDIV
   TMUL


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmt
    3      | stmts stmt

    4 stmt: assign_expr

    5 assign_expr: LET IDENTIFIER ASSIGN OBJECT SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENTIFIER (258) 5
INTEGER (259)
DOUBLE (260)
STRING (261)
OBJECT (262) 5
EQ (263)
NE (264)
LT (265)
LE (266)
GT (267)
GE (268)
LPAREN (269)
RPAREN (270)
LBRACE (271)
RBRACE (272)
COMMA (273)
DOT (274)
SEMICOLON (275) 5
PLUS (276)
MINUS (277)
MUL (278)
DIV (279)
ASSIGN (280) 5
IF (281)
ELSE (282)
WHILE (283)
FOR (284)
LET (285) 5
RETURN (286)
FUNC (287)
TMINUS (288)
TPLUS (289)
TDIV (290)
TMUL (291)


Nonterminals, with rules where they appear

$accept (37)
    on left: 0
program (38)
    on left: 1, on right: 0
stmts (39)
    on left: 2 3, on right: 1 3
stmt (40)
    on left: 4, on right: 2 3
assign_expr (41)
    on left: 5, on right: 4


state 0

    0 $accept: . program $end

    LET  shift, and go to state 1

    program      go to state 2
    stmts        go to state 3
    stmt         go to state 4
    assign_expr  go to state 5


state 1

    5 assign_expr: LET . IDENTIFIER ASSIGN OBJECT SEMICOLON

    IDENTIFIER  shift, and go to state 6


state 2

    0 $accept: program . $end

    $end  shift, and go to state 7


state 3

    1 program: stmts .
    3 stmts: stmts . stmt

    LET  shift, and go to state 1

    $default  reduce using rule 1 (program)

    stmt         go to state 8
    assign_expr  go to state 5


state 4

    2 stmts: stmt .

    $default  reduce using rule 2 (stmts)


state 5

    4 stmt: assign_expr .

    $default  reduce using rule 4 (stmt)


state 6

    5 assign_expr: LET IDENTIFIER . ASSIGN OBJECT SEMICOLON

    ASSIGN  shift, and go to state 9


state 7

    0 $accept: program $end .

    $default  accept


state 8

    3 stmts: stmts stmt .

    $default  reduce using rule 3 (stmts)


state 9

    5 assign_expr: LET IDENTIFIER ASSIGN . OBJECT SEMICOLON

    OBJECT  shift, and go to state 10


state 10

    5 assign_expr: LET IDENTIFIER ASSIGN OBJECT . SEMICOLON

    SEMICOLON  shift, and go to state 11


state 11

    5 assign_expr: LET IDENTIFIER ASSIGN OBJECT SEMICOLON .

    $default  reduce using rule 5 (assign_expr)
